package interfaces;

import entidade.Usuário;
import controle.ControleTamanhoTexto;
import static entidade.Usuário.inserirUsuario;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Cassiano Rogério
 */

public class Cadastrar extends javax.swing.JDialog {
/**
     * Creates new form Cadastro
     * @param parent
     * @param modal */
    public Cadastrar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        URL url = this.getClass().getResource("/images/key 20x20.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(iconeTitulo);
        initComponents();
        //Setar o botão Okay como botão padrão da janela
        getRootPane().setDefaultButton(jButtonCadastrar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCadastroUser = new javax.swing.JPanel();
        jPanelUsers = new javax.swing.JPanel();
        jLabelUser = new javax.swing.JLabel();
        jLabelKey = new javax.swing.JLabel();
        jLabelKey_Reentrada = new javax.swing.JLabel();
        jPanelKey = new javax.swing.JPanel();
        jFormattedTextFieldUser = new javax.swing.JFormattedTextField();
        jPasswordFieldKey = new javax.swing.JPasswordField();
        jPasswordFieldKey_Reentrada = new javax.swing.JPasswordField();
        jPanelBotões = new javax.swing.JPanel();
        jButtonCancelar = new javax.swing.JButton();
        jButtonCadastrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Novo Usuário");

        jLabelUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelUser.setText("Usuário");

        jLabelKey.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelKey.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelKey.setText("Senha");

        jLabelKey_Reentrada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelKey_Reentrada.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelKey_Reentrada.setText("Repita a Senha");

        javax.swing.GroupLayout jPanelUsersLayout = new javax.swing.GroupLayout(jPanelUsers);
        jPanelUsers.setLayout(jPanelUsersLayout);
        jPanelUsersLayout.setHorizontalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsersLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelUsersLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabelKey))
                        .addComponent(jLabelUser))
                    .addComponent(jLabelKey_Reentrada, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        jPanelUsersLayout.setVerticalGroup(
            jPanelUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUsersLayout.createSequentialGroup()
                .addComponent(jLabelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelKey, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelKey_Reentrada)
                .addGap(4, 4, 4))
        );

        jFormattedTextFieldUser.setDocument( new ControleTamanhoTexto(30) );
        jFormattedTextFieldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldUserActionPerformed(evt);
            }
        });

        jPasswordFieldKey.setDocument( new ControleTamanhoTexto(30) );
        jPasswordFieldKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldKeyActionPerformed(evt);
            }
        });

        jPasswordFieldKey_Reentrada.setDocument( new ControleTamanhoTexto(30) );
        jPasswordFieldKey_Reentrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldKey_ReentradaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelKeyLayout = new javax.swing.GroupLayout(jPanelKey);
        jPanelKey.setLayout(jPanelKeyLayout);
        jPanelKeyLayout.setHorizontalGroup(
            jPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPasswordFieldKey_Reentrada)
            .addGroup(jPanelKeyLayout.createSequentialGroup()
                .addGroup(jPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordFieldKey, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelKeyLayout.setVerticalGroup(
            jPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKeyLayout.createSequentialGroup()
                .addComponent(jFormattedTextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldKey_Reentrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCancelar.setMnemonic('a');
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonCadastrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCadastrar.setMnemonic('c');
        jButtonCadastrar.setText("Cadastrar");
        jButtonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCadastrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotõesLayout = new javax.swing.GroupLayout(jPanelBotões);
        jPanelBotões.setLayout(jPanelBotõesLayout);
        jPanelBotõesLayout.setHorizontalGroup(
            jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBotõesLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButtonCadastrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar))
        );
        jPanelBotõesLayout.setVerticalGroup(
            jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotõesLayout.createSequentialGroup()
                .addGroup(jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonCadastrar))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelCadastroUserLayout = new javax.swing.GroupLayout(jPanelCadastroUser);
        jPanelCadastroUser.setLayout(jPanelCadastroUserLayout);
        jPanelCadastroUserLayout.setHorizontalGroup(
            jPanelCadastroUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCadastroUserLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelCadastroUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelBotões, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCadastroUserLayout.createSequentialGroup()
                        .addComponent(jPanelUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanelKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanelCadastroUserLayout.setVerticalGroup(
            jPanelCadastroUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCadastroUserLayout.createSequentialGroup()
                .addGroup(jPanelCadastroUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanelBotões, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelCadastroUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanelCadastroUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        //Encerra a janela
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCadastrarActionPerformed
        int forçaSenha;
        String mensagem;
        //Captura os dados digitados pelo usuário
        Usuário dadosbusca;
        // Recebe os dados do usuário que deverá ser cadastrado no sistema
        Usuário dados = capturaNomeSenha();
        if(dados!=null){
            //Checar se o usúario já foi cadastrado no banco de dados
            dadosbusca =  Usuário.Checar_Cadastro_de_Usuário_e_PK(dados.getusuário());
            if (dadosbusca != null) {
                JOptionPane.showMessageDialog(this, "Este usuário já existe!\nConsidere um usuário diferente.", "Atenção",
                        JOptionPane.ERROR_MESSAGE);
            }
            else if (dadosbusca ==null) {
                //Testa a força da senha
                forçaSenha = entidade.Senha.testar_Forca_Da_Senha(dados.getsenha());
                if (forçaSenha >= 4) {
                    if ((dados.getsenha().length()) >= 8) {
                        //Gera uma chave de criptografia automática
                        dados.setChave(entidade.Senha.gerador_de_chave_de_criptografia(16));
                        //Prepara a chave para criptografar os dados, e encripta a senha digitada em MD5
                        dados = prepararDadosparaArmazenar(dados);
                        //realiza a inserção dos dados informados no banco de dados
                        mensagem = inserirUsuario(dados);
                        //Caso o retorno for null o usur foi cadastrado com sucesso, caso contrário algum erro ocorreu durante a inserção
                        if (mensagem==null) {
                            JOptionPane.showMessageDialog(this,
                                    "Usuário " + dados.getusuário() + " cadastrado com sucesso.", "Atenção",
                                    JOptionPane.WARNING_MESSAGE);
                            limparCampos();
                            this.dispose();
                        }
                        else{
                            JOptionPane.showMessageDialog(this, mensagem, "Atenção", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(this,
                            "Sua senha não possui os pré-requisitos de uma senha segura."
                                + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, e mais de 8 caracteres."
                                + "\nPor exemplo: *>F5s3nh@<*"
                                + "\n\nForça: " + forçaSenha +", INSEGURA, quantidade de caracteres inferior a 8.", "Quantidade de caracteres insuficiente", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else {
                    if(forçaSenha <= 1){
                    JOptionPane.showMessageDialog(this,
                            "Sua senha não possui os pré-requisitos de uma senha segura."
                                + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, e mais de 8 caracteres."
                                + "\nPor exemplo: *>F5s3nh@<*"
                                + "\n\nForça: " + forçaSenha +", INSEGURA", "Senha Insegura", JOptionPane.WARNING_MESSAGE);
                    }
                    else if(forçaSenha == 2){
                        JOptionPane.showMessageDialog(this, 
                                "Sua senha ainda não é tão boa."
                                    + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, e mais de 8 caracteres."
                                    + "\nPor exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forçaSenha +", REGULAR", "Senha REGULAR", JOptionPane.WARNING_MESSAGE);
                    }
                    else if(forçaSenha == 3){
                        JOptionPane.showMessageDialog(this, 
                                "Sua senha é boa, porém ainda deve ser mais forte."
                                    + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, e mais de 8 caracteres."
                                    + "\nPor exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forçaSenha +", BOA", "Senha Boa", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCadastrarActionPerformed

    private void jPasswordFieldKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldKeyActionPerformed
        // TODO add your handling code here:
        //Pula para o campo de senha
        jPasswordFieldKey_Reentrada.requestFocus();
    }//GEN-LAST:event_jPasswordFieldKeyActionPerformed

    private void jFormattedTextFieldUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldUserActionPerformed
        // TODO add your handling code here:
        //Pula para o campo de senha
        jPasswordFieldKey.requestFocus();
    }//GEN-LAST:event_jFormattedTextFieldUserActionPerformed

    private void jPasswordFieldKey_ReentradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldKey_ReentradaActionPerformed
        // TODO add your handling code here:
        //Quando estiver no campo de reentrada da senha permite executar o botão cadastrar com o uso da tecla enter
        jButtonCadastrar.doClick();
    }//GEN-LAST:event_jPasswordFieldKey_ReentradaActionPerformed

    //Permitir fechar a Janela com a tecla Esc
    @Override
    protected JRootPane createRootPane() {
        JRootPane rootPane = new JRootPane();
        KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
        Action actionListener;
        actionListener = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) { 
                setVisible(false);
            } 
        };
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(stroke, "ESCAPE");
        rootPane.getActionMap().put("ESCAPE", actionListener);
        return rootPane;
    }
    
    public Usuário prepararDadosparaArmazenar(Usuário dados){
        //Criptografa a senha escolhida em MD5
        dados.setsenha(entidade.EncriptaSenha_MD5.encripta(dados.getsenha()));
        
        dados.setChave(geraChaveEncriptação(dados));
        return dados;
    }
    
    public String geraChaveEncriptação(Usuário dados){
        //Caso o nome de user tenha mais de 16 caracteres, os primeiros 16 serão utilizados como chave de criptográfia
        if (dados.getusuário().length()>16) {
            String chave = dados.getusuário().substring(0,16);
            return chave;
        }
        //Se o nome de user for menor que 16 caracteres, irá criar uma chave concatenado com o nome de user com 16 caracteres
        else if(dados.getusuário().length()<16){
            String user, chave, chaveNew;
            int tamanho;
            //Recebe o nome de usuário
            user = dados.getusuário();
            //Recebe a chave
            chave = dados.getChave();
            //Armazena o tamanho da variavel user
            tamanho = user.length();
            //Recebe o final da string chave com os caracteres que faltam para completar os dados para gerar a chave de criptografia
            chave = chave.substring(tamanho, 16);
            chaveNew = user+chave;
            return chaveNew;
        }
        //Se o nome de user tiver 16 caracteres ele poderá ser utilizado como chave de criptográfia
        //if (dados.getusuário().length()==16) 
        return dados.getusuário();
    }
    
    public Usuário capturaNomeSenha(){
        //Usuário dados = null;
        Usuário dados = new Usuário(null,null,null);
        
        //Captura o nome de usuário digitado
        dados.setusuário(jFormattedTextFieldUser.getText());
        //Converte os dados de usuário para caixa baixa(minusculo)
        dados.setusuário(dados.getusuário().toLowerCase());
        
        //Captura a senha digitada
        char[] PassWord =  jPasswordFieldKey.getPassword();
        //Converte a senha em String
        dados.setsenha(String.valueOf(PassWord));
        
        //Captura a senha que foi reinformada para teste
        PassWord = null;
        PassWord =  jPasswordFieldKey_Reentrada.getPassword();
        //Converte a senha em String
        dados.setChave(String.valueOf(PassWord));
        
        //Testa se todos os campos foram informados, caso não retorna um aviso ao user e null
        if ((dados.getusuário().isEmpty()==true) && (dados.getsenha().isEmpty()==true) && (dados.getChave().isEmpty()==true)) {
            JOptionPane.showMessageDialog(this, "Informe os dados do usuário que deseja cadastrar.", "Atenção", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        //Testa cada um dos itens
        else{
            if (dados.getusuário().isEmpty()==true) {
            JOptionPane.showMessageDialog(this, "Informe o nome de Usuário.", "Atenção", JOptionPane.ERROR_MESSAGE);
            }
            if (dados.getsenha().isEmpty()==true) {
                JOptionPane.showMessageDialog(this, "Informe a senha.", "Atenção", JOptionPane.ERROR_MESSAGE);
            }
            if (dados.getChave().isEmpty()==true) {
                JOptionPane.showMessageDialog(this, "Reinforme a senha.", "Atenção", JOptionPane.ERROR_MESSAGE);
            }
            //Se ambas as senhas forem digitadas irá testar se as senhas são iguais, caso contrário retorna null
            if ((dados.getsenha().isEmpty()==false) && (dados.getChave().isEmpty()==false)) {
                //Testa se as senhas são as mesmas, caso contrário emite um erro
                if (dados.getsenha().equals(dados.getChave())==true) {
                    dados.setsenha(dados.getsenha());
                }
                else{
                    JOptionPane.showMessageDialog(this, "Senhas não conferem!", "Atenção", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            }
            else{
                return null;
            }
        }
        //Gera uma chave de criptografia automática
        dados.setChave(entidade.Senha.gerador_de_chave_de_criptografia(16));
        return dados;
    }
    
    public void limparCampos(){
        jFormattedTextFieldUser.setText("");
        jPasswordFieldKey.setText("");
        jPasswordFieldKey_Reentrada.setText("");
        // Seta o foco no primeiro campo de texto(usuário)
        jFormattedTextFieldUser.requestFocus();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Cadastrar dialog = new Cadastrar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCadastrar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JFormattedTextField jFormattedTextFieldUser;
    private javax.swing.JLabel jLabelKey;
    private javax.swing.JLabel jLabelKey_Reentrada;
    private javax.swing.JLabel jLabelUser;
    private javax.swing.JPanel jPanelBotões;
    private javax.swing.JPanel jPanelCadastroUser;
    private javax.swing.JPanel jPanelKey;
    private javax.swing.JPanel jPanelUsers;
    private javax.swing.JPasswordField jPasswordFieldKey;
    private javax.swing.JPasswordField jPasswordFieldKey_Reentrada;
    // End of variables declaration//GEN-END:variables
}
