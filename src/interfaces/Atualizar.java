package interfaces;

import controle.ControleTamanhoTexto;
import entidade.Senha;
import entidade.Usuário;
import entidade.Visão;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Cassiano Rogério
 */

//Janela responsável por permitir a atualização de dados no banco de dados

public class Atualizar extends javax.swing.JDialog {
    private int elemento;
    Vector<Visão<String>> senhas_cadastradas;
    Usuário userLogado;
    /** Creates new form Adicionar */
    public Atualizar(java.awt.Frame parent, boolean modal, int item, Usuário user, Vector<Visão<String>> senhas) {
        super(parent, modal);
        userLogado = user;
        //Recebe qual foi o cadastro selecionado
        this.elemento = item;
        //Capta os dados dos cadastros de senhas armazenados no banco
        senhas_cadastradas = senhas;
        URL url = this.getClass().getResource("/images/key 20x20.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(iconeTitulo);
        initComponents();
        //Exibe na tela as informações do cadastro de senha que foi selecionado
        visualizarSenha(false);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fundo = new javax.swing.JPanel();
        jPanelEtiquetas = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelNome = new javax.swing.JLabel();
        jLabelUsuário = new javax.swing.JLabel();
        jLabelSenha = new javax.swing.JLabel();
        jPanelTextos = new javax.swing.JPanel();
        jTextFieldNome = new javax.swing.JTextField();
        jTextFieldUsuário = new javax.swing.JTextField();
        jTextFieldSenha = new javax.swing.JTextField();
        jPanelBotões = new javax.swing.JPanel();
        jButtonCancelar = new javax.swing.JButton();
        jButtonAtualizar = new javax.swing.JButton();
        jButtonVer_Senha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualizar");
        setAlwaysOnTop(true);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jLabelNome.setText("Nome");

        jLabelUsuário.setText("Usuário");

        jLabelSenha.setText("Senha");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNome)
                    .addComponent(jLabelUsuário)
                    .addComponent(jLabelSenha))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabelNome)
                .addGap(18, 18, 18)
                .addComponent(jLabelUsuário)
                .addGap(18, 18, 18)
                .addComponent(jLabelSenha)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextFieldNome.setDocument( new ControleTamanhoTexto(30) );
        jTextFieldNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeActionPerformed(evt);
            }
        });

        jTextFieldUsuário.setDocument( new ControleTamanhoTexto(30) );
        jTextFieldUsuário.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUsuárioActionPerformed(evt);
            }
        });

        jTextFieldSenha.setDocument( new ControleTamanhoTexto(30) );
        jTextFieldSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSenhaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTextosLayout = new javax.swing.GroupLayout(jPanelTextos);
        jPanelTextos.setLayout(jPanelTextosLayout);
        jPanelTextosLayout.setHorizontalGroup(
            jPanelTextosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldSenha)
            .addComponent(jTextFieldUsuário)
            .addComponent(jTextFieldNome, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanelTextosLayout.setVerticalGroup(
            jPanelTextosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTextosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldUsuário, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonCancelar.setMnemonic('c');
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonAtualizar.setMnemonic('u');
        jButtonAtualizar.setText("Atualizar");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        jButtonVer_Senha.setText("Ver Senha");
        jButtonVer_Senha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVer_SenhaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotõesLayout = new javax.swing.GroupLayout(jPanelBotões);
        jPanelBotões.setLayout(jPanelBotõesLayout);
        jPanelBotõesLayout.setHorizontalGroup(
            jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBotõesLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jButtonAtualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonVer_Senha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar))
        );
        jPanelBotõesLayout.setVerticalGroup(
            jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotõesLayout.createSequentialGroup()
                .addGroup(jPanelBotõesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAtualizar)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonVer_Senha))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        this.dispose();

        javax.swing.GroupLayout jPanelEtiquetasLayout = new javax.swing.GroupLayout(jPanelEtiquetas);
        jPanelEtiquetas.setLayout(jPanelEtiquetasLayout);
        jPanelEtiquetasLayout.setHorizontalGroup(
            jPanelEtiquetasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtiquetasLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelEtiquetasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTextos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelBotões, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelEtiquetasLayout.setVerticalGroup(
            jPanelEtiquetasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtiquetasLayout.createSequentialGroup()
                .addComponent(jPanelTextos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBotões, javax.swing.GroupLayout.PREFERRED_SIZE, 28, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout FundoLayout = new javax.swing.GroupLayout(Fundo);
        Fundo.setLayout(FundoLayout);
        FundoLayout.setHorizontalGroup(
            FundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FundoLayout.createSequentialGroup()
                .addComponent(jPanelEtiquetas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        FundoLayout.setVerticalGroup(
            FundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FundoLayout.createSequentialGroup()
                .addComponent(jPanelEtiquetas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        getContentPane().add(Fundo);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        //fecha a janela
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed
        // TODO add your handling code here:
        //Executa a atualização dos dados e fecha a janela
        atualizarSenha();
        this.dispose();
    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    private void jTextFieldSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSenhaActionPerformed
        // TODO add your handling code here:
        //Quando estiver no campo de texto da senha permite confirmar usando a tecla enter
        jButtonAtualizar.doClick();
    }//GEN-LAST:event_jTextFieldSenhaActionPerformed

    private void jButtonVer_SenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVer_SenhaActionPerformed
        // TODO add your handling code here:
        //Imprimir na janela o cadastro da senha selecionado
        visualizarSenha(true);
        //Setar o botão Okay como botão padrão da janela
        getRootPane().setDefaultButton(jButtonAtualizar);
    }//GEN-LAST:event_jButtonVer_SenhaActionPerformed

    private void jTextFieldNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeActionPerformed
        // TODO add your handling code here:
        //Pula para o campo de usuário
        jTextFieldUsuário.requestFocus();
    }//GEN-LAST:event_jTextFieldNomeActionPerformed

    private void jTextFieldUsuárioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUsuárioActionPerformed
        // TODO add your handling code here:
        //Pula para o campo de usuário
        jTextFieldSenha.requestFocus();
    }//GEN-LAST:event_jTextFieldUsuárioActionPerformed

    //Permitir fechar a Janela com a tecla Esc
    @Override
    protected JRootPane createRootPane() {
        JRootPane rootPane = new JRootPane();
        KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
        Action actionListener;
        actionListener = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) { 
                setVisible(false);
            } 
        };
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(stroke, "ESCAPE");
        rootPane.getActionMap().put("ESCAPE", actionListener);
        return rootPane;
    }
    
    //Exibe na janela os dados do cadastro da senha selecionada
    private void visualizarSenha(boolean verSenha){
        String nome, senhaDescriptografada, asteriscoSenha = "";
        Senha senha = null;
        
        //chegar qual foi a senha solicitada para alterar
        Visão<String> visãoSelecionada = senhas_cadastradas.elementAt(elemento);
        
        //Recebe o campo utilizado para realizar a busca no BD
        nome = visãoSelecionada.getChave();
        //Capta os dados da senha atual
        senha = Senha.buscarSenha(nome);
        
        //Descriptografando a senha
        senhaDescriptografada = entidade.Senha.descriptografe_e_decodifique(senha.getsenha(), userLogado.getChave());
        
        //Imprimir na tela os dados atuais
        jTextFieldNome.setText(senha.getNome());
        jTextFieldUsuário.setText(senha.getusuário());
        
        for (int i = 0; i < senhaDescriptografada.length(); i++) {
            asteriscoSenha +="*";
        }
        if (verSenha) {
            jTextFieldSenha.setText(senhaDescriptografada);
        }
        else{
            jTextFieldSenha.setText(asteriscoSenha);
        }
    }
    
    //Capta a senha e realiza a atualização no banco
    private void atualizarSenha() {
        String nome = null;
        Senha senha = null;
        Senha novaSenha = null;
        String mensagem_erro = "";
        
        //chegar qual foi a senha solicitada
        Visão<String> visãoSelecionada = senhas_cadastradas.elementAt(elemento);
        
        //Recebe o campo utilizado para realizar a busca
        nome = visãoSelecionada.getChave();
        //Capta os dados da senha e sua chave primária (ID)
        senha = Senha.buscarSenhaEPK(nome);
        
        //Recebe os dados digitados, para serem atualizados no BD
        novaSenha = obterSenhaInformada(senha.getsenha());
        
        //Se todos os dados foram digitados irá realizar a a atualização no banco
        if (novaSenha != null){
            novaSenha.setID(senha.getID());
            mensagem_erro = Senha.alterarSenha(novaSenha);
            //Chega se a atualização foi concluida sem erros e informa ao usuário
            if (mensagem_erro == null){           
                if(senha.getNome().equals(novaSenha.getNome())){
                    mensagem_erro = "Senha " + senha.getNome() + " foi atualizada!"; 
                    JOptionPane.showMessageDialog(this, mensagem_erro);
                } else {
                    mensagem_erro = senha.getNome() + "Senha " + " foi atualizada para " + novaSenha.getNome() + "!"; 
                    JOptionPane.showMessageDialog(this, mensagem_erro);
                }
                this.dispose();
            }
            else {
                JOptionPane.showMessageDialog(this, mensagem_erro, "ERRO", JOptionPane.ERROR_MESSAGE);
            } 
        }
        else JOptionPane.showMessageDialog(this, "Por gentileza preencher todos os campos corretamente."
                + "\nCaso for atualizar a senha, não se esqueça de limpar"
                + "\no campo de senha caso a senha esteja oculta."
                + "\n\nVocê deve atualizar ao menos a senha!", "Erro ao atualizar dados",
            JOptionPane.ERROR_MESSAGE);
    }
    
    //Capta os dados digitados pelo usuário
    private Senha obterSenhaInformada(String SenhaAtivaCriptografada){
        entidade.Senha senha = null;
        String senhaDescriptografada = "", asteriscoSenha = "";
        
        String Nome =  jTextFieldNome.getText();
        if (Nome.isEmpty()) return null;
        String Usuário = jTextFieldUsuário.getText();
        if (Usuário.isEmpty()) return null;
        String Senha = jTextFieldSenha.getText();
        if (Senha.isEmpty()) return null;
        
        //Descriptografando a senha
        senhaDescriptografada = entidade.Senha.descriptografe_e_decodifique(SenhaAtivaCriptografada, userLogado.getChave());
        for (int i = 0; i < senhaDescriptografada.length(); i++) {
            asteriscoSenha +="*";
        }
        if (((senhaDescriptografada.equals(Senha)==false) && (asteriscoSenha.equals(Senha)==false))){
            if (Senha.contains(asteriscoSenha)==false) {
                int forca = entidade.Senha.testar_Forca_Da_Senha(Senha);
                if(forca <= 1){
                    JOptionPane.showMessageDialog(this,
                            "Sua senha não possui os pré-requisitos de uma senha segura,\n recomendamos que mude-a assim que possível."
                                    + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, por exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forca+", INSEGURA", "Insegura", JOptionPane.WARNING_MESSAGE);
                }
                else if(forca == 2){
                    JOptionPane.showMessageDialog(this, 
                            "Sua senha ainda não é tão boa,\n recomendamos que mude-a asim que possível."
                                    + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, por exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forca+", REGULAR", "REGULAR", JOptionPane.WARNING_MESSAGE);
                }
                else if(forca == 3){
                    JOptionPane.showMessageDialog(this, 
                            "Sua senha é boa, porém ainda sim recomendamos\nque mude-a asim que possível, para uma mais forte."
                                    + "\n\nUse caracteres maiúsculos, minúsculos, números\ne caracteres especiais, por exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forca+", BOA", "Boa", JOptionPane.WARNING_MESSAGE);
                }
                else if(forca >= 4){
                    JOptionPane.showMessageDialog(this, 
                            "Sua senha é forte, recomendamos usar senhas neste padrão."
                                    + "\n\nSempre use caracteres maiúsculos, minúsculos, números\ne caracteres especiais, por exemplo: *>F5s3nh@<*"
                                    + "\n\nForça: " + forca+", FORTE", "FORTE", JOptionPane.WARNING_MESSAGE);
                }
                /*  Criptografando senha usando AES  */
                Senha = entidade.Senha.criptografe_e_codifique(Senha, userLogado.getChave());
            }
            else{
                return null;
            }
        }
        else {
            Senha = SenhaAtivaCriptografada;
        }
        return new Senha (Nome,Usuário, Senha);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Atualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Atualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Atualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Atualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Usuário user = null;
                Vector<Visão<String>> senhas = null;
                Atualizar dialog = new Atualizar(new javax.swing.JFrame(), true, -2, user, senhas);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fundo;
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonVer_Senha;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelSenha;
    private javax.swing.JLabel jLabelUsuário;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBotões;
    private javax.swing.JPanel jPanelEtiquetas;
    private javax.swing.JPanel jPanelTextos;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldSenha;
    private javax.swing.JTextField jTextFieldUsuário;
    // End of variables declaration//GEN-END:variables

}
